#! /usr/bin/env bash
# ============================================================================ #
#
# Operate on `compile_commands.json' files.
#
# ---------------------------------------------------------------------------- #

set -eu;
set -o pipefail;

# ---------------------------------------------------------------------------- #

_as_me="ccjs";

_version="0.1.0";

_usage_msg="USAGE: $_as_me [OPTIONS...] COMMAND [CMD-OPTIONS...] [ARGS...]

Operate on \`compile_commands.json' files.
";

#shellcheck disable=SC2140
_help_msg="$_usage_msg

OPTIONS
  -h,--help           Print help message to STDOUT.
  -u,--usage          Print usage message to STDOUT.
  -v,--version        Print version information to STDOUT.

COMMANDS
  add FILE -- FLAGS   Add entry to \`compile_commands.json'.
  remove FILE         Remove entries from \`compile_commands.json'.
  list                List all entries in \`compile_commands.json'.
  show FILE           Show entry from \`compile_commands.json'.

ENVIRONMENT
  CCJS_OUT            Output file. Default: \`./compile_commands.json'.
  JQ                  Command used as \`jq' executable.
  REALPATH            Command used as \`realpath' executable.
  MKTEMP              Command used as \`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage() {
  if [[ "${1:-}" = "-f" ]]; then
    echo "$_help_msg";
  else
    echo "$_usage_msg";
  fi
}


# ---------------------------------------------------------------------------- #

_usage_add_msg="USAGE: $_as_me [OPTIONS...] add [CMD-OPTIONS]... \
FILE OUTPUT DIRECTORY ARGS...

Add entry to \`compile_commands.json'.
";

_help_add_msg="$_usage_add_msg
Replaces existing entry if it exists.

When \`--in-place' is specified, \`compile_commands.json' is modified in-place
instead of being printed to \`STDOUT'.
Existing output file will be backed up by adding a \`~' suffix to its name.

ARGUMENTS
  FILE              The source file to compile ( e.g. \`foo.c' ).
  OUTPUT            The output file ( e.g. \`foo.o' ).
  DIRECTORY         The directory in which to run the compiler.

OPTIONS
  -h,--help         Print help message to STDOUT.
  -u,--usage        Print usage message to STDOUT.
  -i,--in-place     Add entry to \`compile_commands.json' in-place.

ENVIRONMENT
  CCJS_OUT          Output file. Default: \`./compile_commands.json'.
  JQ                Command used as \`jq' executable.
  REALPATH          Command used as \`realpath' executable.
  MKTEMP            Command used as \`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage_add() {
  if [[ "${1:-}" = "-f" ]]; then
    echo "$_help_add_msg";
  else
    echo "$_usage_add_msg";
  fi
}


# ---------------------------------------------------------------------------- #

_usage_remove_msg="USAGE: $_as_me [OPTIONS...] remove [CMD-OPTIONS]... FILE...

Remove entries from \`compile_commands.json'.
";

_help_remove_msg="$_usage_remove_msg
When \`--in-place' is specified, \`compile_commands.json' is modified in-place
instead of being printed to \`STDOUT'.
Existing output file will be backed up by adding a \`~' suffix to its name.

ARGUMENTS
  FILE              Source file(s) to be removed ( e.g. \`foo.c' ).

OPTIONS
  -h,--help         Print help message to STDOUT.
  -u,--usage        Print usage message to STDOUT.
  -i,--in-place     Add entry to \`compile_commands.json' in-place.

ENVIRONMENT
  CCJS_OUT          Output file. Default: \`./compile_commands.json'.
  JQ                Command used as \`jq' executable.
  REALPATH          Command used as \`realpath' executable.
  MKTEMP            Command used as \`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage_remove() {
  if [[ "${1:-}" = "-f" ]]; then
    echo "$_help_remove_msg";
  else
    echo "$_usage_remove_msg";
  fi
}


# ---------------------------------------------------------------------------- #

_usage_list_msg="USAGE: $_as_me [OPTIONS...] list [CMD-OPTIONS]...

List entries in \`compile_commands.json'.
";

_help_list_msg="$_usage_list_msg
Only one of \`--files', \`--outputs', or \`--directories' can be specified.

Only one of \`--format', \`--lines', \`--json', or \`--tree' can be specified.

OPTIONS
  -h,--help         Print help message to STDOUT.
  -u,--usage        Print usage message to STDOUT.
  -s,--files        Print source file names only.
  -o,--outputs      Print output file names only.
  -d,--directories  Print directory names only.
  -f,--format FMT   Print output in a given FMT ( default: lines ).
  -l,--lines        Print output in lines format. Same as \`--format=lines'.
  -j,--json         Print output in JSON format. Same as \`--format=json'.
  -t,--tree         Print output in tree format. Same as \`--format=tree'.

ARGUMENTS
  FMT               Output format, being one of \`lines', \`json', or \`tree'.

ENVIRONMENT
  CCJS_OUT          Output file. Default: \`./compile_commands.json'.
  JQ                Command used as \`jq' executable.
  REALPATH          Command used as \`realpath' executable.
  MKTEMP            Command used as \`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage_list() {
  if [[ "${1:-}" = "-f" ]]; then
    echo "$_help_list_msg";
  else
    echo "$_usage_list_msg";
  fi
}


# ---------------------------------------------------------------------------- #

_usage_show_msg="USAGE: $_as_me [OPTIONS...] show [CMD-OPTIONS]...  \
FILE-OR-OUTPUT...

Show an entry in \`compile_commands.json'.
";

_help_show_msg="$_usage_show_msg

OPTIONS
  -h,--help         Print help message to STDOUT.
  -u,--usage        Print usage message to STDOUT.
  -s,--file         Print source file name only.
  -o,--output       Print output file name only.
  -d,--directory    Print directory name only.
  -a,--args         Print arguments only.
  -j,--json         Print output in JSON format.

ENVIRONMENT
  CCJS_OUT          Output file. Default: \`./compile_commands.json'.
  JQ                Command used as \`jq' executable.
  REALPATH          Command used as \`realpath' executable.
  MKTEMP            Command used as \`mktemp' executable.
";


# ---------------------------------------------------------------------------- #

usage_show() {
  if [[ "${1:-}" = "-f" ]]; then
    echo "$_help_show_msg";
  else
    echo "$_usage_show_msg";
  fi
}


# ---------------------------------------------------------------------------- #

# @BEGIN_INJECT_UTILS@
: "${JQ:=jq}";
: "${REALPATH:=realpath}";
: "${MKTEMP:=mktemp}";
export JQ REALPATH MKTEMP;
# @END_INJECT_UTILS@

# @BEGIN_INJECT_PATH@
PATH="${PATH:+$PATH:}${BASH_SOURCE[0]%/*}";
if [[ -d "${BASH_SOURCE[0]%/*}/../libexec" ]]; then
  PATH="$PATH:${BASH_SOURCE[0]%/*}/../libexec";
fi
export PATH;
# @END_INJECT_PATH@


# ---------------------------------------------------------------------------- #

_TMP_FILES='';
_TMP_DIRS='';
export _TMP_FILES _TMP_DIRS;

#shellcheck disable=SC2120
mktmp_auto() {
  local _tmp;
  _tmp="$( $MKTEMP "$@"; )";
  case " $* " in
    *\ -d\ *|*\ --directory\ *) export _TMP_DIRS="$_TMP_DIRS:$_tmp"; ;;
    *)                          export _TMP_FILES="$_TMP_FILES:$_tmp"; ;;
  esac
  echo "$_tmp";
}


# ---------------------------------------------------------------------------- #

cleanup() {
  local _tmp_files _tmp_dirs;
  if [[ -n "$_TMP_FILES" ]]; then
    IFS=':' read -ra _tmp_files <<< "$_TMP_FILES";
    rm -f "${_tmp_files[@]}";
  fi
  if [[ -n "$_TMP_DIRS" ]]; then
    IFS=':' read -ra _tmp_dirs <<< "$_TMP_DIRS";
    rm -rf "${_tmp_dirs[@]}";
  fi
}

_es=0;
trap '_es="$?"; cleanup; exit "$_es";' HUP TERM INT QUIT EXIT;


# ---------------------------------------------------------------------------- #

# Set the output file.

set_ccjs_out() {
  if [[ -n "${CCJS_OUT:-}" ]]; then
    CCJS_OUT="$( "$REALPATH" "$CCJS_OUT"; )";
  else
    # Find nearest project root or `compile_commands.json' by searching "up".
    local _dir="$PWD";
    while [[ "${_dir:-/}" != "/" ]]; do
      if [[ -f "$_dir/compile_commands.json" ]]; then
        CCJS_OUT="$_dir/compile_commands.json";
        break;
      elif [[ -d "$_dir/.git" ]]; then
        CCJS_OUT="$_dir/compile_commands.json";
        break;
      elif [[ -d "$_dir/.root" ]]; then
        CCJS_OUT="$_dir/compile_commands.json";
        break;
      fi
      _dir="${_dir%/*}";
    done
    : "${CCJS_OUT:=$PWD/compile_commands.json}";
    export CCJS_OUT;
  fi
}


# ---------------------------------------------------------------------------- #

ccjs_add() {
  local _IN_PLACE='';
  local _FILE='';
  local _OUTPUT='';
  local _DIRECTORY='';

  declare -a _cc_args;
  _cc_args=();

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -u|--usage)    usage_add;    exit 0; ;;
      -h|--help)     usage_add -f; exit 0; ;;
      -i|--in-place) _IN_PLACE=:;  ;;
      --) shift; break; ;;
      *)
        if [[ -z "$_FILE" ]]; then
          _FILE="$1";
        elif [[ -z "$_OUTPUT" ]]; then
          _OUTPUT="$1";
        elif [[ -z "$_DIRECTORY" ]]; then
          _DIRECTORY="$1";
        else
          _cc_args+=( "$1" );
        fi
      ;;
    esac
    shift;
  done
  # Add remaining arguments to \`_cc_args'.
  if [[ -n "$*" ]]; then
    _cc_args+=( "$@" );
  fi


  # Get absolute paths.

  case "$_FILE" in
    "") echo "$_as_me: Missing FILE argument." >&2; usage_add >&2; exit 1; ;;
    /*) :; ;;
    *) _FILE="$( "$REALPATH" -m "$_FILE"; )"; ;;
  esac

  case "${_OUTPUT:=${_FILE%.*}.o}" in
    /*) :; ;;
    *) _OUTPUT="$( "$REALPATH" -m "$_OUTPUT"; )"; ;;
  esac

  case "${_DIRECTORY:=$PWD}" in
    /*) :; ;;
    *) _DIRECTORY="$( "$REALPATH" -m "$_DIRECTORY"; )"; ;;
  esac


  # Create entry

  local _ARGS='';
  for _arg in "${_cc_args[@]}"; do
    # Escape double quotes.
    _ARGS="${_ARGS:+$_ARGS, }\"${_arg//\"/\\\"}\"";
  done

  local _ENTRY="{
    \"directory\": \"$_DIRECTORY\",
    \"file\": \"$_FILE\",
    \"output\": \"$_OUTPUT\",
    \"arguments\": [$_ARGS]
  }";


  # If there's an existing file add the entry to it, otherwise just make a
  # singleton list with the entry.
  if ! [[ -f "$CCJS_OUT" ]]; then
    # If the file doesn't exist create it.
    if [[ -n "$_IN_PLACE" ]]; then
      echo "[$_ENTRY]"|$JQ > "$CCJS_OUT";
    else
      echo "[$_ENTRY]"|$JQ;
    fi
  else
    local TMPFILE;
    TMPFILE="$( mktmp_auto; )";
    local _JQ_CMD="[\$_ENTRY] + .|unique_by( .output )";
    if [[ -n "$_IN_PLACE" ]]; then
      # Add the entry to the file, and remove old entry ( if present ).
      $JQ --argjson _ENTRY "$_ENTRY" "$_JQ_CMD" "$CCJS_OUT" > "$TMPFILE";
      # Backup the original file.
      mv "$CCJS_OUT" "$CCJS_OUT~";
      # Overwrite the original file.
      mv "$TMPFILE" "$CCJS_OUT";
    else
      $JQ --argjson _ENTRY "$_ENTRY" "$_JQ_CMD" "$CCJS_OUT";
    fi
  fi
}


# ---------------------------------------------------------------------------- #

ccjs_remove() {
  local _IN_PLACE='';

  declare -a _files;
  _files=();

  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      -u|--usage)    usage_remove;    exit 0; ;;
      -h|--help)     usage_remove -f; exit 0; ;;
      -i|--in-place) _IN_PLACE=:;  ;;
      *)             _files+=( "$1" ); ;;
    esac
    shift;
  done


  # Get absolute paths.

  if [[ -z "${_files[*]}" ]]; then
    echo "$_as_me: no input files were given" >&2;
    usage_remove >&2;
    exit 1;
  fi

  local _FILES='';
  for _file in "${_files[@]}"; do
    case "$_file" in
      /*) :; ;;
      *) _file="$( "$REALPATH" -m "$_file"; )"; ;;
    esac
    _FILES="${_FILES:+$_FILES, }\"$_file\"";
  done
  _FILES="[$_FILES]";

  local TMPFILE;
  TMPFILE="$( mktmp_auto; )";
  #shellcheck disable=SC2016
  local _JQ_CMD='map( select( .file as $FILE|
                              ( $_FILES|index( [$FILE] ) ) == null ) )';
  if [[ -n "$_IN_PLACE" ]]; then
    # Add the entry to the file, and remove old entry ( if present ).
    $JQ --argjson _FILES "$_FILES" "$_JQ_CMD" "$CCJS_OUT" > "$TMPFILE";
    # Backup the original file.
    mv "$CCJS_OUT" "$CCJS_OUT~";
    # Overwrite the original file.
    mv "$TMPFILE" "$CCJS_OUT";
  else
    $JQ --argjson _FILES "$_FILES" "$_JQ_CMD" "$CCJS_OUT";
  fi
}


# ---------------------------------------------------------------------------- #

ccjs_list() {
  local _FMT='';
  local _ONLY='';
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      # Split short options such as `-abc' -> `-a -b -c'
      -[^-]?*)
        _arg="$1";
        declare -a _args;
        _args=();
        shift;
        _i=1;
        while [[ "$_i" -lt "${#_arg}" ]]; do
          _args+=( "-${_arg:$_i:1}" );
          _i="$(( _i + 1 ))";
        done
        set -- "${_args[@]}" "$@";
        unset _arg _args _i;
        continue;
      ;;
      --*=*)
        _arg="$1";
        shift;
        set -- "${_arg%%=*}" "${_arg#*=}" "$@";
        unset _arg;
        continue;
      ;;
      -u|--usage)    usage_list;    exit 0; ;;
      -h|--help)     usage_list -f; exit 0; ;;
      -s|--files)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s list: Only one of \`--files', \`--outputs', " "$_as_me";
            echo "\`--directories' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='files';
        fi
      ;;
      -o|--outputs)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s list: Only one of \`--files', \`--outputs', " "$_as_me";
            echo "\`--directories' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='outputs';
        fi
      ;;
      -d|--directories)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s list: Only one of \`--files', \`--outputs', " "$_as_me";
            echo "\`--directories' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='directories';
        fi
      ;;
      -f|--format)
        if [[ -n "${_FMT:-}" ]]; then
          {
            printf "%s list: Only one of \`--format', \`--lines', " "$_as_me";
            echo "\`--json', or \`--tree' can be specified";
          } >&2;
          exit 1;
        else
          shift;
          _FMT="$1";
        fi
      ;;
      -j|--json)
        if [[ -n "${_FMT:-}" ]]; then
          {
            printf "%s list: Only one of \`--format', \`--lines', " "$_as_me";
            echo "\`--json', or \`--tree' can be specified";
          } >&2;
          exit 1;
        else
          _FMT='json';
        fi
      ;;
      -l|--lines)
        if [[ -n "${_FMT:-}" ]]; then
          {
            printf "%s list: Only one of \`--format', \`--lines', " "$_as_me";
            echo "\`--json', or \`--tree' can be specified";
          } >&2;
          exit 1;
        else
          _FMT='lines';
        fi
      ;;
      -t|--tree)
        if [[ -n "${_FMT:-}" ]]; then
          {
            printf "%s list: Only one of \`--format', \`--lines', " "$_as_me";
            echo "\`--json', or \`--tree' can be specified";
          } >&2;
          exit 1;
        else
          _FMT='tree';
        fi
      ;;
      *)
        echo "$_as_me list: Unexpected argument(s) '$*'" >&2;
        usage -f >&2;
        exit 1;
      ;;
    esac
    shift;
  done

  : "${_FMT:=lines}";

  if [[ -n "${_ONLY:-}" ]] && [[ "$_FMT" = "tree" ]]; then
    {
      printf "%s list: \`--tree' is incompatible with \`--files', " "$_as_me";
      echo "\`--outputs', or \`--directories'";
    } >&2;
    exit 1;
  fi

  local _JQ_CMD_lines='map( .file + " -> " + .output )|.[]';
  #shellcheck disable=SC2016
  local _JQ_CMD_lines_only='map( .[$_FIELD] )|unique|.[]';
  local _JQ_CMD_json='.';
  #shellcheck disable=SC2016
  local _JQ_CMD_json_only='map( .[$_FIELD] )|unique';
  #shellcheck disable=SC2016
  local _JQ_CMD_tree='map(
    .directory as $DIR
    |( .file|=sub( "^" + $DIR + "/"; ""; "" ) )
    |( .output|=sub( "^" + $DIR + "/"; ""; "" ) )
   )|group_by( .directory )
    |map( .[0].directory as $DIR
          |( map( .file|length )|max ) as $MAX_LEN
          |map( until( ( .file|length ) == $MAX_LEN; .file += " " ) )
          |$DIR + "\n" + ( map( "  " + .file + " -> " + .output )|join( "\n" ) )
        )|join( "\n" )';

  local _JQ_CMD;
  eval _JQ_CMD=\""\$_JQ_CMD_$_FMT"${_ONLY:+_only}\";

  local _FIELD;
  case "${_ONLY:-files}" in
    files)       _FIELD='file'; ;;
    outputs)     _FIELD='output'; ;;
    directories) _FIELD='directory'; ;;
    *)           _FIELD='file'; ;;
  esac

  $JQ -r --arg _FIELD "$_FIELD" "$_JQ_CMD" "$CCJS_OUT";
}


# ---------------------------------------------------------------------------- #

ccjs_show() {
  local _FILE='';
  local _FMT='lines';
  local _ONLY='';
  while [[ "$#" -gt 0 ]]; do
    case "$1" in
      # Split short options such as `-abc' -> `-a -b -c'
      -[^-]?*)
        _arg="$1";
        declare -a _args;
        _args=();
        shift;
        _i=1;
        while [[ "$_i" -lt "${#_arg}" ]]; do
          _args+=( "-${_arg:$_i:1}" );
          _i="$(( _i + 1 ))";
        done
        set -- "${_args[@]}" "$@";
        unset _arg _args _i;
        continue;
      ;;
      --*=*)
        _arg="$1";
        shift;
        set -- "${_arg%%=*}" "${_arg#*=}" "$@";
        unset _arg;
        continue;
      ;;
      -u|--usage)    usage_show;    exit 0; ;;
      -h|--help)     usage_show -f; exit 0; ;;
      -s|--files)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s show: Only one of \`--file', \`--output', " "$_as_me";
            echo "\`--directory', or \`--args' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='file';
        fi
      ;;
      -o|--output)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s show: Only one of \`--file', \`--output', " "$_as_me";
            echo "\`--directory', or \`--args' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='output';
        fi
      ;;
      -d|--directory)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s show: Only one of \`--file', \`--output', " "$_as_me";
            echo "\`--directory', or \`--args' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='directory';
        fi
      ;;
      -a|--arguments)
        if [[ -n "${_ONLY:-}" ]]; then
          {
            printf "%s show: Only one of \`--file', \`--output', " "$_as_me";
            echo "\`--directory', or \`--args' can be specified";
          } >&2;
          exit 1;
        else
          _ONLY='arguments';
        fi
      ;;
      -j|--json) _FMT='json'; ;;
      *)
        if [[ -z "${_FILE:-}" ]]; then
          _FILE="$1";
        else
          echo "$_as_me show: Unexpected argument(s) '$*'" >&2;
          usage -f >&2;
          exit 1;
        fi
      ;;
    esac
    shift;
  done

  : "${_FMT:=lines}";

  if [[ -z "${_ONLY:-}" ]]; then
    if [[ "$_FMT" = 'json' ]]; then
      #shellcheck disable=SC2016
      $JQ -r --arg _FILE "$_FILE"                                           \
        'map( select( ( .file == $_FILE ) or ( .output == $_FILE ) ) )[0]'  \
        "$CCJS_OUT";
    else
      #shellcheck disable=SC2016
      $JQ -r --arg _FILE "$_FILE"                                          \
        'map( select( ( .file == $_FILE ) or ( .output == $_FILE ) ) )[0]
         |["file:      \( .file )",
           "output:    \( .output )",
           "directory: \( .directory )",
           ( "arguments: \"" + ( .arguments|map( sub( "\""; "\\\""; "g" ) )
                                 |join( "\" \"" ) ) + "\"" )
          ]|join( "\n" )' "$CCJS_OUT";
    fi
    return "$?";
  fi

  local _FIELD;
  case "${_ONLY:-file}" in
    file|output|directory)
      #shellcheck disable=SC2016
      $JQ -r --arg _FILE "$_FILE" --arg _FIELD "$_ONLY"                    \
        'map( select( ( .file == $_FILE ) or ( .output == $_FILE ) ) )[0]
         |.[$_FILED]' "$CCJS_OUT";
    ;;
    arguments)
      if [[ "$_FMT" = 'json' ]]; then
        #shellcheck disable=SC2016
        $JQ -r --arg _FILE "$_FILE"                                          \
          'map( select( ( .file == $_FILE ) or ( .output == $_FILE ) ) )[0]
           |.arguments' "$CCJS_OUT";
      else
        #shellcheck disable=SC2016
        $JQ -r --arg _FILE "$_FILE"                                          \
          'map( select( ( .file == $_FILE ) or ( .output == $_FILE ) ) )[0]
           |"\"" + ( .arguments|map( sub( "\""; "\\\""; "g" ) )
                     |join( "\" \"" ) ) + "\""' "$CCJS_OUT";
      fi
      return "$?";
    ;;
  esac

}


# ---------------------------------------------------------------------------- #

# Parse "global" options up until the first sub-command name.

while [[ "$#" -gt 0 ]]; do
  case "$1" in
    # Split short options such as `-abc' -> `-a -b -c'
    -[^-]?*)
      _arg="$1";
      declare -a _args;
      _args=();
      shift;
      _i=1;
      while [[ "$_i" -lt "${#_arg}" ]]; do
        _args+=( "-${_arg:$_i:1}" );
        _i="$(( _i + 1 ))";
      done
      set -- "${_args[@]}" "$@";
      unset _arg _args _i;
      continue;
    ;;
    --*=*)
      _arg="$1";
      shift;
      set -- "${_arg%%=*}" "${_arg#*=}" "$@";
      unset _arg;
      continue;
    ;;
    -u|--usage)    usage;    exit 0; ;;
    -h|--help)     usage -f; exit 0; ;;
    -v|--version)  echo "$_version"; exit 0; ;;
    --) shift; break; ;;
    -?|--*)
      {
        printf "%s: Unrecognized option: '%s'. " "$_as_me" "$1";
        echo 'Did you forget to name a sub-command?';
      } >&2;
      usage -f >&2;
      exit 1;
    ;;
    add)
      shift;
      set_ccjs_out;
      ccjs_add "$@";
      exit "$?";
    ;;
    remove)
      shift;
      set_ccjs_out;
      ccjs_remove "$@";
      exit "$?";
    ;;
    list)
      shift;
      set_ccjs_out;
      ccjs_list "$@";
      exit "$?";
    ;;
    show)
      shift;
      set_ccjs_out;
      ccjs_show "$@";
      exit "$?";
    ;;
    *)
      echo "$_as_me: Unexpected argument(s) '$*'" >&2;
      usage -f >&2;
      exit 1;
    ;;
  esac
  shift;
done


# ---------------------------------------------------------------------------- #
#
#
#
# ============================================================================ #
